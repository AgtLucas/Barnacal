// Generated by BUCKLESCRIPT VERSION 1.8.2, PLEASE EDIT WITH CARE
'use strict';

var Week              = require("./week.js");
var $$Array           = require("bs-platform/lib/js/array.js");
var DateFns           = require("./dateFns.js");
var Caml_array        = require("bs-platform/lib/js/caml_array.js");
var Pervasives        = require("bs-platform/lib/js/pervasives.js");
var ReasonReact       = require("reason-react/lib/js/src/reasonReact.js");
var Get_day           = require("date-fns/get_day");
var Is_today          = require("date-fns/is_today");
var Get_days_in_month = require("date-fns/get_days_in_month");

var component = ReasonReact.statelessComponent("CalendarBody");

var table_styles = { };

function week_of_month(date, day_of_month) {
  var first_of_month = DateFns.start_of_month(date);
  var first_weekday = Get_day(first_of_month);
  var offset = (day_of_month + first_weekday | 0) - 1 | 0;
  return offset / 7 | 0;
}

function month_date(date, idx, _) {
  var day_of_month = idx + 1 | 0;
  var date$1 = DateFns.set_date(date, day_of_month);
  var day_of_week = Get_day(date$1);
  var week = week_of_month(date$1, day_of_month);
  var is_today = +Is_today(date$1);
  return /* tuple */[
          week,
          day_of_week,
          day_of_month,
          is_today
        ];
}

function fold_weeks(container, weekday) {
  Caml_array.caml_array_set(Caml_array.caml_array_get(container, weekday[0]), weekday[1], /* tuple */[
        /* Some */[weekday[2]],
        weekday[3]
      ]);
  return container;
}

function parse_weeks(date, day_count) {
  var empty_dates = Caml_array.caml_make_vect(day_count, date);
  var dates = $$Array.mapi((function (param, param$1) {
          return month_date(date, param, param$1);
        }), empty_dates);
  var empty_weeks = $$Array.make_matrix(6, 7, /* tuple */[
        /* None */0,
        /* false */0
      ]);
  return $$Array.fold_left(fold_weeks, empty_weeks, dates);
}

function week_component(idx, week) {
  return ReasonReact.element(/* Some */[Pervasives.string_of_int(idx)], /* None */0, Week.make(week, /* array */[]));
}

function make(date, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      var day_count = Get_days_in_month(date);
      var weeks = parse_weeks(date, day_count);
      return ReasonReact.createDomElement("tbody", {
                  style: table_styles
                }, $$Array.mapi(week_component, weeks));
    });
  return newrecord;
}

exports.component      = component;
exports.table_styles   = table_styles;
exports.week_of_month  = week_of_month;
exports.month_date     = month_date;
exports.fold_weeks     = fold_weeks;
exports.parse_weeks    = parse_weeks;
exports.week_component = week_component;
exports.make           = make;
/* component Not a pure module */
